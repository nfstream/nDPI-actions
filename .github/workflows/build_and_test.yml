name: build_and_test
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    types: [opened, synchronize, reopened]
  release:
    types: [created]
jobs:
  test:
    name: ${{ matrix.os }} ${{ matrix.gcrypt }} ${{ matrix.compiler }} ${{ matrix.pcre }} ${{ matrix.maxminddb }} ${{ matrix.sanitizer }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "ubuntu-18.04", "macOS-latest", "macos-11"]
        gcrypt: ["--disable-gcrypt", ""]
        compiler: ["default-cc"]
        pcre: [""]
        maxminddb: [""]
        san: [""]
        # We test oldest (available) versus newest (available) compiler version on Ubuntu Latest
        include:
          - compiler: "gcc-7"
            os: ubuntu-latest
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler: "gcc-10"
            os: ubuntu-latest
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler:  "clang-7"
            os: ubuntu-latest
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler:  "clang-12"
            os: ubuntu-latest
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler: "default-cc"
            os: ubuntu-latest
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler: "default-cc"
            os: ubuntu-18.04
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler:  "default-cc"
            os: macOS-latest
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
          - compiler:  "default-cc"
            os: macos-11
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            san: "--with-sanitizer"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Install Ubuntu Prerequisites
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install autoconf automake libtool pkg-config gettext libjson-c-dev flex bison libpcap-dev
        sudo apt-get install gcc-arm-linux-gnueabihf gcc-mingw-w64 libc6-dev
    - name: Configure Ubuntu compiler (GCC)
      if: startsWith(matrix.os, 'ubuntu')  && startsWith(matrix.compiler, 'gcc')
      run: |
        sudo apt-get install ${{ matrix.compiler }}
    - name: Configure Ubuntu compiler (CLANG)
      if: startsWith(matrix.os, 'ubuntu')  && startsWith(matrix.compiler, 'clang')
      run: |
        sudo apt-get install ${{ matrix.compiler }}
    - name: Install Ubuntu Prerequisites (libgcrypt)
      if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.gcrypt, '--disable-gcrypt')
      run: |
        sudo apt-get install libgcrypt20-dev
    - name: Install Ubuntu Prerequisites (libpcre)
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.pcre, '--with-pcre')
      run: |
        sudo apt-get install libpcre3-dev
    - name: Install Ubuntu Prerequisites (maxminddb)
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.maxminddb, '--with-maxminddb')
      run: |
        sudo apt-get install libmaxminddb-dev
    - name: Installing MacOS prerequisites
      if: startsWith(matrix.os, 'macOS')
      run: |
        brew install autoconf automake libtool pkg-config gettext json-c
    - name: Install MacOS Prerequisites (libgcrypt)
      if: startsWith(matrix.os, 'macOS') && !startsWith(matrix.gcrypt, '--disable-gcrypt')
      run: |
        brew install libgcrypt
    - name: Install MacOS Prerequisites (libpcre)
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.pcre, '--with-pcre')
      run: |
        brew install pcre
    - name: Install MacOS Prerequisites (maxminddb)
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.maxminddb, '--with-maxminddb')
      run: |
        brew install libmaxminddb
    - name: Clone nDPI
      run: |
        git clone --branch dev https://github.com/nfstream/nDPI.git
    - name: Configure nDPI on Ubuntu
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'default-cc')
      run: |
        cd nDPI
        env CC=gcc CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.san }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
    - name: Configure nDPI on MacOS
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.compiler, 'default-cc')
      run: |
        cd nDPI
        env CC=clang CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.san }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
    - name: Configure nDPI with specified GCC version on Ubuntu
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'g')
      run: |
        cd nDPI
        env CC=${{ matrix.compiler }} CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.san }} ${{ matrix.pcre }} ${{ matrix.maxminddb }} 
    - name: Configure nDPI with specified CLANG on Ubuntu
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'c')
      run: |
        cd nDPI
        env CC=${{ matrix.compiler }} CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.san }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
    - name: Compile nDPI
      run: |
        cd nDPI
        make all
        cd example
        make ndpiSimpleIntegration
        cd ..
        cd python
        make
        cd ..
    - name: Test nDPI 
      run: |
        cd nDPI
        cd tests
        ./do.sh
        ./do-unit.sh
        ./do-dga.sh
    - name: Build nDPI [ARM] (runs only on ubuntu jobs)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd nDPI
        make distclean && env CFLAGS='-Werror' ./autogen.sh --host=arm-linux-gnueabihf --with-only-libndpi ${{ matrix.gcrypt }} ${{ matrix.san }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
        make all
    - name: Build nDPI [Mingw-w64] (runs only on ubuntu jobs)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd nDPI
        make distclean && ./autogen.sh --host=x86_64-w64-mingw32 ${{ matrix.gcrypt }} ${{ matrix.san }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
        make all
