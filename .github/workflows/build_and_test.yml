name: build_and_test
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    types: [opened, synchronize, reopened]
  release:
    types: [created]
jobs:
  test:
    name: ${{ matrix.os }} ${{ matrix.platform }} ${{ matrix.gcrypt }} ${{ matrix.compiler }} ${{ matrix.pcre }} ${{ matrix.maxminddb }} ${{ matrix.msan }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "ubuntu-18.04", "macOS-latest", "macos-11"]
        gcrypt: ["--disable-gcrypt", ""]
        compiler: ["default-cc"]
        platform: ["x86_64"]
        pcre: [""]
        maxminddb: [""]
        msan: [""]
        # We test oldest (available) versus newest (available) compiler version on Ubuntu Latest 1
        include:
          - compiler: "gcc-7"
            os: ubuntu-latest
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "--with-sanitizer"
          - compiler: "gcc-10"
            os: ubuntu-latest
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "--with-sanitizer"
          - compiler:  "clang-7"
            os: ubuntu-latest
            platform: "x86_64"
            gcrypt: "x86_64"
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "--with-sanitizer"
          - compiler:  "clang-12"
            os: ubuntu-latest
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "--with-sanitizer"
          - compiler: "default-cc"
            os: ubuntu-latest
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "--with-sanitizer"
          - compiler: "default-cc"
            os: ubuntu-18.04
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "--with-sanitizer"
          - compiler:  "default-cc"
            os: macOS-latest
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "" # Disable sanitizer on macos
          - compiler:  "default-cc"
            os: macos-11
            platform: "x86_64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "" # Disable sanitizer on macos
          - compiler:  "default-cc"
            os: ubuntu-latest
            platform: "arm64"
            gcrypt: ""
            pcre: "--with-pcre"
            maxminddb: "--with-maxminddb"
            msan: "" # Disable sanitizer on macos
    steps:
    - name: Setup multiarch/qemu-user-static
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.platform, 'arm64')
      run: |
        docker run --rm --privileged multiarch/qemu-user-static:register
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Clone nDPI
      run: |
        git clone --branch dev https://github.com/ntop/nDPI.git
    - name: Install qemu prerequisites
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.platform, 'arm64')
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c
          "apt-get -y update &&
          apt-get -y install autoconf automake libtool pkg-config gettext libjson-c-dev flex bison libpcap-dev"
    - name: Install Ubuntu prerequisites
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.platform, 'x86_64')
      run: |
        sudo apt-get update
        sudo apt-get install autoconf automake libtool pkg-config gettext libjson-c-dev flex bison libpcap-dev
        sudo apt-get install gcc-mingw-w64
    - name: Configure Ubuntu compiler (GCC)
      if: startsWith(matrix.os, 'ubuntu')  && startsWith(matrix.compiler, 'gcc') && startsWith(matrix.platform, 'x86_64')
      run: |
        sudo apt-get install ${{ matrix.compiler }}
    - name: Configure Ubuntu compiler (CLANG)
      if: startsWith(matrix.os, 'ubuntu')  && startsWith(matrix.compiler, 'clang') && startsWith(matrix.platform, 'x86_64')
      run: |
        sudo apt-get install ${{ matrix.compiler }}
    - name: Install Ubuntu Prerequisites (libgcrypt)
      if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.gcrypt, '--disable-gcrypt') && startsWith(matrix.platform, 'x86_64')
      run: |
        sudo apt-get install libgcrypt20-dev
    - name: Install qemu prerequisites (clone libgcrypt)
      if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.gcrypt, '--disable-gcrypt') && startsWith(matrix.platform, 'arm64')
      run: |
          git clone --branch libgpg-error-1.42 https://github.com/gpg/libgpg-error
          git clone --branch libgcrypt-1.8.8 https://github.com/gpg/libgcrypt
    - name: Install qemu prerequisites (libgcrypt)
      if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.gcrypt, '--disable-gcrypt') && startsWith(matrix.platform, 'arm64')
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: >
          bash -c
          "cd libgpg-error && 
          ./autogen.sh &&
          ./configure -enable-maintainer-mode --enable-static --enable-shared --with-pic --disable-doc --disable-nls &&
          make &&
          make install &&
          cd .. &&
          rm -rf libgpg-error &&
          cd libgcrypt &&
          ./autogen.sh &&
          ./configure -enable-maintainer-mode --enable-static --enable-shared --with-pic --disable-doc &&
          make &&
          sudo make install &&
          cd .. &&
          rm -rf libgcrypt"
    - name: Install Ubuntu Prerequisites (libpcre)
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.pcre, '--with-pcre') && startsWith(matrix.platform, 'x86_64')
      run: |
        sudo apt-get install libpcre3-dev
    - name: Install Ubuntu Prerequisites (maxminddb)
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.maxminddb, '--with-maxminddb') && startsWith(matrix.platform, 'x86_64')
      run: |
        sudo apt-get install libmaxminddb-dev
    - name: Installing MacOS prerequisites
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.platform, 'x86_64')
      run: |
        brew install autoconf automake libtool pkg-config gettext json-c
    - name: Install MacOS Prerequisites (libgcrypt)
      if: startsWith(matrix.os, 'macOS') && !startsWith(matrix.gcrypt, '--disable-gcrypt') && startsWith(matrix.platform, 'x86_64')
      run: |
        brew install libgcrypt
    - name: Install MacOS Prerequisites (libpcre)
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.pcre, '--with-pcre') && startsWith(matrix.platform, 'x86_64')
      run: |
        brew install pcre
    - name: Install MacOS Prerequisites (maxminddb)
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.maxminddb, '--with-maxminddb') && startsWith(matrix.platform, 'x86_64')
      run: |
        brew install libmaxminddb
    - name: Configure nDPI on Ubuntu
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'default-cc') && startsWith(matrix.platform, 'x86_64')
      run: |
        cd nDPI
        env CC=gcc CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.msan }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
    - name: Configure nDPI on MacOS
      if: startsWith(matrix.os, 'macOS') && startsWith(matrix.compiler, 'default-cc') && startsWith(matrix.platform, 'x86_64')
      run: |
        cd nDPI
        env CC=clang CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.msan }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
    - name: Configure nDPI with specified GCC version on Ubuntu
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'gcc') && startsWith(matrix.platform, 'x86_64')
      run: |
        cd nDPI
        env CC=${{ matrix.compiler }} CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.msan }} ${{ matrix.pcre }} ${{ matrix.maxminddb }} 
    - name: Configure nDPI with specified CLANG on Ubuntu
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.compiler, 'clang') && startsWith(matrix.platform, 'x86_64')
      run: |
        cd nDPI
        env CC=${{ matrix.compiler }} CFLAGS='-Werror' ./autogen.sh --enable-debug-messages ${{ matrix.gcrypt }} ${{ matrix.msan }} ${{ matrix.pcre }} ${{ matrix.maxminddb }}
    - name: Compile nDPI
      if: startsWith(matrix.platform, 'x86_64') 
      run: |
        cd nDPI
        make all
        cd example
        make ndpiSimpleIntegration
        cd ..
        cd python
        make
        cd ..
    - name: Test nDPI
      if : startsWith(matrix.platform, 'x86_64')
      run: |
        cd nDPI
        cd tests
        ./do.sh
        ./do-unit.sh
        ./do-dga.sh
